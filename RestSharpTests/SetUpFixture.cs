using Microsoft.Extensions.Configuration;
using NUnit.Framework;
using RestSharpLibrary.Enumerators;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace RestSharpTests
{
    [SetUpFixture]
    internal class SetUpFixture
    {
        /// <summary>
        /// Holds the values in the appSettings.json and user secrets.
        /// </summary>
        public static IConfiguration Configuration { get; set; }

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            // Note: the "generic type parameter" is the class name.
            //   Instructs the configuration builder to search the assembly
            //   with the type (class name) for an instance of
            //   UserSecretsIdAttribute (automatically generated by MSBuild),
            //   which specifies the unique user secrets ID needed to store and
            //   retrieve the secrets. When you create a secrets.json file
            //   using the Manage User Secrets context menu item on the
            //   project, an element named UserSecretsId will be generated in
            //   the *.csproj file. This contains a UUID to find the secrets
            //   entered for that project.
            var builder = new ConfigurationBuilder().
                AddUserSecrets<SetUpFixture>();
            Configuration = builder.Build();
        }

        private Uri GetBaseUri(EnvironmentEnum environment)
        {
            return environment switch
            {
                EnvironmentEnum.Beta => new Uri("https://baseuri.beta/"),
                EnvironmentEnum.Test => new Uri("https://baseuri.test/"),
                EnvironmentEnum.Prod => new Uri("https://baseuri.prod/"),
                EnvironmentEnum.Undefined =>
                    throw new ArgumentException("The parameter was not set."),
                _ => throw new ArgumentOutOfRangeException(
                    "Value was not handled by switch")
            };
        }

        private static Uri GetAuthUri(EnvironmentEnum environment)
        {
            return environment switch
            {
                EnvironmentEnum.Beta => new Uri("https://service.beta.com/"),
                EnvironmentEnum.Test => new Uri("https://service.test.com/"),
                EnvironmentEnum.Prod => new Uri("https://service.Prod.com/"),
                EnvironmentEnum.Undefined => throw new ArgumentException(
                    "The parameter was not set before the switch."),
                _ => throw new ArgumentOutOfRangeException(
                    "The switch did not have a case for the value.")
            };
        }
    }
}
